// Advance scalings for Arms
const arm_adv = [0.0037174721189591076, 0.011990156552699095, 0.023613801769726165, 0.03796010262317399, 0.05466254777737054, 0.07319754960992722, 0.09330331430964972, 0.11466568930310488, 0.13691816325462067, 0.15995601863971937, 0.1834651028849678, 0.2072883397036494, 0.2312686528090476, 0.25519660715220693, 0.2790722027331274, 0.3026336457406147, 0.3259332949369077, 0.3488140740352898, 0.3712236242735222, 0.3931619456516048, 0.41452432064505995, 0.4353631080161265, 0.45557359024032673, 0.47526048484213834, 0.49426671553484475, 0.5127493586051626, 0.5305513377663752, 0.5478297293051992, 0.5644798156971569, 0.5805539557044872, 0.5961045080894287, 0.6110791140897429, 0.6255301324676684, 0.6394575632232053, 0.6528614063563537, 0.6658463793915912, 0.67830776480444, 0.6903502801193779, 0.7019215665741662, 0.7130739829310435, 0.7238598879522488, 0.7342269228755433, 0.7442274464631656, 0.7539138174773549, 0.7631813183936331, 0.7721870254987172, 0.7808262212681292, 0.789203623226347, 0.7972668726111315, 0.8050683281847217, 0.8125556311848788, 0.8198334991360804, 0.8268495732760878, 0.8336562123671396, 0.8402010576469973, 0.8465364678778994, 0.8526624430598461, 0.8585789831928373, 0.8642860882768731, 0.8698361170741924, 0.875229069584795, 0.8804125870464422, 0.8854913869836117, 0.8903607518718257, 0.8950730404733233, 0.899680611550343, 0.9041311063406461, 0.9084245248442326, 0.9126132258233416, 0.9166972092779727, 0.9206241164458873, 0.9244463060893241, 0.9281637782082831, 0.9317765328027645, 0.9352845698727682, 0.9386878894182942, 0.9419864914393423, 0.9452327346981517, 0.9483219016702445, 0.9514110686423373, 0.9543431593277135, 0.9572228912508508, 0.9600502644117493, 0.9627729200481701, 0.9654432169223519, 0.9680087962720562, 0.9705743756217603, 0.9730352374469867, 0.9754437405099744, 0.9777475260484843, 0.9800513115869941, 0.9822503796010262, 0.9865437981046128, 0.9885857898319284, 0.9906277815592439, 0.9926174145243206, 0.9945023299649196, 0.9963872454055186, 0.9982198020838787, 1.0]
// Motivity/Technique scalings for Arms
const arm_phys = [0.0, 0.0, 0.0, 0.0, 0.00374512079333263, 0.012079333263002427, 0.023789429264690368, 0.038242430636143056, 0.055069100116045995, 0.07374195590252136, 0.09399725709463023, 0.11551851461124592, 0.13793649119105392, 0.16114569047367866, 0.18482962337799347, 0.20883004536343497, 0.23298871188943981, 0.25709463023525686, 0.28114780040088616, 0.30488448148538877, 0.32835742166895243, 0.3514083764110138, 0.3739845975313852, 0.3960860850300665, 0.41760734254668214, 0.43860111826141995, 0.45896191581390444, 0.47879523156451104, 0.49794282097267645, 0.516562928578964, 0.5344973098428104, 0.551904209304779, 0.5686781306044941, 0.5848718219221437, 0.6005380314379154, 0.6156240109716214, 0.6301825087034497, 0.6442135246334002, 0.6577170587614727, 0.6707986074480431, 0.6833526743327355, 0.6954847557759257, 0.7071421035974259, 0.7183774659774238, 0.7292435910961071, 0.7396877307732883, 0.7497626331891549, 0.759521046523895, 0.7688574744171326, 0.7779301614094314, 0.7866336111404156, 0.795073319970461, 0.8031965397193797, 0.8110560185673594, 0.8185990083342125, 0.8259310053803144, 0.8329992615254773, 0.8398565249498893, 0.8464500474733622, 0.852832577276084, 0.8590041143580547, 0.8649646587192742, 0.8707142103597426, 0.8763055174596477, 0.8817385800189893, 0.8869606498575799, 0.8920772233357949, 0.8969828040932588, 0.9017301403101593, 0.9063719801666843, 0.9108555754826458, 0.9151809262580441, 0.9194007806730667, 0.9235151387277138, 0.9274712522417976, 0.9313218693955059, 0.9350669901888384, 0.9387066146217955, 0.9422407426943771, 0.9456693744065829, 0.9489925097584133, 0.952262896930056, 0.9553750395611351, 0.9584871821922144, 0.9614410802827302, 0.9643422301930583, 0.9671906319231987, 0.9699335372929634, 0.9726236944825404, 0.9752083553117418, 0.9777930161409432, 0.980272180609769, 0.982698596898407, 0.9850195168266694, 0.987340436754932, 0.9895558603228188, 0.9938812110982171, 0.9959383901255406, 0.9979955691528642, 1.0]
// Advance scalings for Weapons
const weapon_adv = [0.003313840155945419, 0.012085769980506823, 0.025730994152046785, 0.043859649122807015, 0.06549707602339182, 0.09025341130604289, 0.11754385964912281, 0.14678362573099416, 0.17719298245614035, 0.20877192982456141, 0.24074074074074073, 0.27270955165692007, 0.3044834307992203, 0.3358674463937622, 0.3664717348927875, 0.3962962962962963, 0.4249512670565302, 0.45263157894736844, 0.4793372319688109, 0.5048732943469786, 0.5290448343079922, 0.5522417153996101, 0.5742690058479533, 0.5953216374269006, 0.6152046783625731, 0.6339181286549708, 0.6518518518518519, 0.6688109161793372, 0.6847953216374268, 0.7, 0.7144249512670565, 0.7278752436647173, 0.7409356725146199, 0.7530214424951267, 0.7647173489278752, 0.7756335282651072, 0.7859649122807018, 0.795906432748538, 0.8052631578947368, 0.8142300194931774, 0.8226120857699805, 0.8307992202729045, 0.838401559454191, 0.8456140350877193, 0.8526315789473684, 0.8590643274853801, 0.8654970760233918, 0.8713450292397661, 0.8771929824561403, 0.8826510721247564, 0.8879142300194932, 0.8927875243664717, 0.8976608187134503, 0.9021442495126706, 0.9064327485380117, 0.9107212475633528, 0.9146198830409357, 0.9185185185185185, 0.9222222222222223, 0.9257309941520467, 0.9292397660818713, 0.9323586744639376, 0.9354775828460039, 0.9385964912280702, 0.9415204678362573, 0.9442495126705653, 0.9469785575048733, 0.9495126705653022, 0.952046783625731, 0.9543859649122807, 0.9567251461988304, 0.958869395711501, 0.9610136452241715, 0.9631578947368421, 0.9651072124756336, 0.967056530214425, 0.9690058479532164, 0.9707602339181286, 0.9725146198830409, 0.9742690058479532, 0.9758284600389864, 0.9773879142300195, 0.9789473684210527, 0.9805068226120858, 0.9818713450292398, 0.9832358674463938, 0.9846003898635478, 0.9859649122807017, 0.9871345029239766, 0.9884990253411307, 0.9896686159844055, 0.9908382066276803, 0.9929824561403509, 0.9941520467836257, 0.9951267056530214, 0.9961013645224172, 0.9970760233918129, 0.9980506822612085, 0.9990253411306043, 1.0]
// Motivity/Technique scalings for Weapons
const weapon_phys = [0.0, 0.0, 0.0, 0.0, 0.0033268101761252445, 0.01213307240704501, 0.02583170254403131, 0.04403131115459882, 0.06575342465753424, 0.09060665362035225, 0.11800391389432485, 0.14735812133072407, 0.17788649706457926, 0.2095890410958904, 0.24168297455968688, 0.27377690802348337, 0.3056751467710372, 0.33718199608610566, 0.3679060665362035, 0.3978473581213307, 0.42661448140900193, 0.4544031311154599, 0.4812133072407045, 0.5068493150684932, 0.5311154598825831, 0.5544031311154599, 0.5765166340508806, 0.597651663405088, 0.6176125244618396, 0.636399217221135, 0.6544031311154599, 0.6714285714285714, 0.6874755381604697, 0.7027397260273973, 0.7172211350293543, 0.7307240704500978, 0.7438356164383562, 0.7559686888454011, 0.7677103718199608, 0.7786692759295499, 0.7890410958904109, 0.7990215264187867, 0.8084148727984345, 0.8174168297455968, 0.8258317025440313, 0.8340508806262231, 0.8416829745596869, 0.8489236790606653, 0.8559686888454012, 0.862426614481409, 0.8688845401174168, 0.8747553816046967, 0.8806262230919765, 0.8861056751467711, 0.8913894324853229, 0.8962818003913894, 0.901174168297456, 0.9056751467710372, 0.9099804305283757, 0.9142857142857143, 0.9181996086105675, 0.9221135029354207, 0.9258317025440314, 0.9293542074363992, 0.9328767123287671, 0.9360078277886497, 0.9391389432485323, 0.9422700587084148, 0.9452054794520548, 0.947945205479452, 0.9506849315068493, 0.953228962818004, 0.9557729941291585, 0.9581213307240705, 0.9604696673189824, 0.9626223091976517, 0.9647749510763209, 0.9669275929549902, 0.9688845401174169, 0.9708414872798434, 0.9727984344422701, 0.974559686888454, 0.9763209393346379, 0.9780821917808219, 0.9796477495107632, 0.9812133072407045, 0.9827788649706458, 0.9843444227005871, 0.9857142857142858, 0.9870841487279843, 0.988454011741683, 0.9898238747553816, 0.9909980430528376, 0.9923679060665362, 0.9935420743639922, 0.9947162426614481, 0.9968688845401175, 0.9980430528375733, 0.9990215264187867, 1.0]

// Standard weapons scale at 10%, the 10 or so weapons that don't follow this have a reinforcements parameter in blades.js with the correct numbers.
const standard_upgrade = [1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0];
// Same as above except for boss/unique weapons
const boss_upgrade = [1, 1.22, 1.44, 1.66, 1.88, 2.1];

// Handle scaling values = [Weapon Motivity/Technique, Weapon Advance, Arm Motivity/Technique, Arm Advance]
const scaling = [
    [0],
    [0.511, 0.513, 0.6319, 0.6366],   // D
    [0.8176, 0.8207, 1.0111, 1.0186], // C
    [1.0834, 1.0875, 1.3397, 1.3597], // B
    [1.3287, 1.3337, 1.643, 1.6553],  // A
    [1.5331, 1.5389, 1.8958, 1.9099]  // S
];

// active
$(function() {
    // Attach modify events to handleUpdates()
    $('#handle-list, #crank-list, #reinf-list').change(handleUpdates);
    $('#motivity, #technique, #advance').on('input', handleUpdates);

    for (handle in handles) {
        if (handles.hasOwnProperty(handle)) {
            let h = handles[handle]
            if (h.name !== "Acidic Crystal Spear") {
                document.getElementById("handle-list").insertAdjacentHTML('beforeend', '<option value="' + handle.valueOf() + '">' + h.name + '</option>')
            }
        }
    }

    //Trigger first call
    handleUpdates()
})

function handleUpdates() {
    let table = document.getElementById("table")
    let rows = table.getElementsByTagName('tr');

    for (let i = rows.length - 1; i > 0; i--) {
        table.deleteRow(i);
    }

    let h = $('#handle-list option:selected').val();
    let handle = handles[h];

    //Calc crank if selected
    let handleScaling = applyCrank(handle, document.getElementById("crank-list").selectedIndex);

    let letters = ['-', 'D', 'C', 'B', 'A', 'S']
    document.getElementById("s_table").insertAdjacentHTML("beforeend",
        "<tr>" +
             "<td>" +
             letters[handleScaling[0] === null ? 0 : handleScaling[0]+1] +
             "</td>" +
             "<td>" +
             letters[handleScaling[1] === null ? 0 : handleScaling[1]+1] +
             "</td>" +
             "<td>" +
             letters[handleScaling[2] === null ? 0 : handleScaling[2]+1] +
             "</td>" +
             "<tr>")

    try {
        if ($(this).val() != null && $(this).val() > 100) {
            $(this).val(100)
        }
    } catch (e) {
        console.log(e)
    }

    let m = parseInt($('#motivity').val());
    let t = parseInt($('#technique').val());
    let a = parseInt($('#advance').val());
    let r = parseInt($('#reinf-list').val());

    let m_scaling = handleScaling[0] === null ? 0 : scaling[handleScaling[0]][0];
    let t_scaling = handleScaling[1] === null ? 0 : scaling[handleScaling[1]][0];
    let a_scaling = handleScaling[2] === null ? 0 : scaling[handleScaling[2]][1];

    $('#table').append("<tbody>")

    //Iterate over the blades and calc damage
    for (blade in blades) {
        if (blades.hasOwnProperty(blade)) {
            let weapon = blades[blade]
            let blitz_ar, fire_ar, acid_ar, phys_ar, ar, lar, har, chhar, upgrade = 0

            if (weapon.reinforcements == null && weapon.grade == null) {
                upgrade = standard_upgrade[r];
            } else {
                upgrade = weapon.reinforcements[r];
            }

            blitz_ar = Math.floor((weapon.elemATK[0] * upgrade) + (weapon.elemATK[0] * (weapon_adv[a-1])));
            fire_ar  = Math.floor((weapon.elemATK[1] * upgrade) + (weapon.elemATK[1] * (weapon_adv[a-1])));
            acid_ar  = Math.floor((weapon.elemATK[2] * upgrade) + (weapon.elemATK[2] * (weapon_adv[a-1])));
            phys_ar  = Math.floor((weapon.physATK) + (weapon.physATK * (weapon_phys[m-1] * m_scaling + weapon_phys[t-1] * t_scaling)));
            ar       = blitz_ar + fire_ar + acid_ar + phys_ar;
            lar      = Math.floor(ar * handle.light_mult);
            har      = Math.floor(ar * handle.heavy_mult);
            chhar    = Math.floor(ar * handle.ch_heavy_mult);

            $('#table').append('<tr>' +
                '<td>' + weapon.name + '</td>' +
                '<td>' + phys_ar + '</td>' +
                '<td>' + blitz_ar + '</td>' +
                '<td>' + fire_ar + '</td>' +
                '<td>' + acid_ar + '</td>' +
                '<td>' + ar + '</td>' +
                '<td>' + lar + '</td>' +
                '<td>' + har + '</td>' +
                '<td>' + chhar + '</td>' +
                '</tr>');
        }
    }
    $('#table').append("</tbody>")
    Sortable.init()
}

function applyCrank(handle, index) {
    //order = m, t, a
    //scaling = [D, C, B, A, S]
    //scaling: [0, 2, null]
    let scaling = [0, 0, 0];
    switch (index) {
        //motivity crank
        case 1:
            scaling[0] = handle.scaling[0] + 1;
            scaling[1] = handle.scaling[1] === null ? 0 : handle.scaling[1] - 1;
            scaling[2] = handle.scaling[2]
            break;
        //technique crank
        case 2:
            scaling[0] = handle.scaling[0] === null ? 0 : handle.scaling[0] - 1;
            scaling[1] = handle.scaling[1] + 1;
            scaling[2] = handle.scaling[2]
            break;
        //advance crank
        case 3:
            scaling[0] = handle.scaling[0];
            scaling[1] = handle.scaling[1];
            scaling[2] = handle.scaling[2] === null ? 0 : handle.scaling[2] + 1;
            console.log(scaling[2])
            break;
        default:
            return handle.scaling;
    }
    return scaling;
}